/*$Id: reduce.cu 729 2009-11-12 09:56:09Z wenbinor $*/
/**
 *This is the source code for Mars, a MapReduce framework on graphics
 *processors.
 *Developers: Wenbin Fang (HKUST), Bingsheng He (Microsoft Research Asia)
 *Naga K. Govindaraju (Microsoft Corp.), Qiong Luo (HKUST), Tuyong Wang (Sina.com).
 *If you have any question on the code, please contact us at 
 *           wenbin@cse.ust.hk or savenhe@microsoft.com
 *
 *The license is a free non-exclusive, non-transferable license to reproduce, 
 *use, modify and display the source code version of the Software, with or 
 *without modifications solely for non-commercial research, educational or 
 *evaluation purposes. The license does not entitle Licensee to technical support, 
 *telephone assistance, enhancements or updates to the Software. All rights, title 
 *to and ownership interest in Mars, including all intellectual property rights 
 *therein shall remain in HKUST.
 */

#ifndef __REDUCE_CU__
#define __REDUCE_CU__

#include "MarsInc.h"
#include "global.h"

__device__ void REDUCE_COUNT_FUNC//(void* key, void* vals, size_t keySize, size_t valCount)
{
	for (int i = 0; i < valCount; i++)
			{
				VAL* left = (VAL *)GET_VAL_FUNC(vals,i);
				//printf("label:%d ,value:%d",left->label,left->value);
				if(left->label==0 &&left->value!=0){
					for(int j=0;j<valCount;j++){
						VAL *right=(VAL *)GET_VAL_FUNC(vals,j);
						if(right->label==1 && right->value!=0){
							EMIT_COUNT_FUNC( sizeof(PATH),sizeof(int));;
						}
						else continue;
					}
				}
				else continue;
			}

	//EMIT_COUNT_FUNC( sizeof(PATH),sizeof(int));
}

__device__ void REDUCE_FUNC//(void* key, void* vals, size_t keySize, size_t valCount)
{
	int* pKey=(int*)key;

	int* o_val = (int*)GET_OUTPUT_BUF(sizeof(0));
	PATH* path = (PATH*)GET_OUTPUT_BUF(sizeof(PATH));
	//size_t valSize = valCount * sizeof(int);

	*o_val=*pKey;

		for (int i = 0; i < valCount; i++)
		{
			VAL* left = (VAL *)GET_VAL_FUNC(vals, i);
			//printf("label:%d ,value:%d\n",left->label,left->value);
			if(left->label==0 &&left->value!=0){
				for(int j=0;j<valCount;j++){
					VAL *right=(VAL *)GET_VAL_FUNC(vals,j);
					if(right->label==1 && right->value!=0){
						path->path[0]=left->value;
						path->path[1]=*pKey;
						path->path[2]=right->value;
						EMIT_FUNC(path, o_val, sizeof(PATH),sizeof(int));
					}
					else continue;
				}
			}
			else continue;
		}
		//printf("\n");

}
#endif //__REDUCE_CU__
